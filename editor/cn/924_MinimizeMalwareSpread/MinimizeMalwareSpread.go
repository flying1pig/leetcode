package main

import "slices"

/**
给出了一个由 n 个节点组成的网络，用 n × n 个邻接矩阵图
 graph 表示。在节点网络中，当 graph[i][j] = 1 时，表示节点 i 能够直接连接到另一个节点 j。

 一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。这种恶意软件的传播将
继续，直到没有更多的节点可以被这种方式感染。

 假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。

 如果从 initial 中移除某一节点能够最小化 M(initial)， 返回该节点。如果有多个节点满足条件，就返回索引最小的节点。

 请注意，如果某个节点已从受感染节点的列表 initial 中删除，它以后仍有可能因恶意软件传播而受到感染。






 示例 1：


输入：graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
输出：0


 示例 2：


输入：graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
输出：0


 示例 3：


输入：graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
输出：1




 提示：



 n == graph.length
 n == graph[i].length
 2 <= n <= 300
 graph[i][j] == 0 或 1.
 graph[i][j] == graph[j][i]
 graph[i][i] == 1
 1 <= initial.length <= n
 0 <= initial[i] <= n - 1
 initial 中所有整数均不重复


 Related Topics 深度优先搜索 广度优先搜索 并查集 图 数组 哈希表 👍 152 👎 0

*/

/*
题型: 图论dfs
题目: 尽量减少恶意软件的传播
*/

// leetcode submit region begin(Prohibit modification and deletion)
func minMalwareSpread(graph [][]int, initial []int) int {
	vis := make([]bool, len(graph))
	isInitial := make([]bool, len(graph))
	for _, x := range initial {
		isInitial[x] = true
	}

	var nodeId, size int
	var dfs func(int)
	dfs = func(x int) {
		vis[x] = true
		size++
		// 按照状态机更新 nodeId
		if nodeId != -2 && isInitial[x] {
			if nodeId < 0 {
				nodeId = x
			} else {
				nodeId = -2
			}
		}
		for y, conn := range graph[x] {
			if conn == 1 && !vis[y] {
				dfs(y)
			}
		}
	}

	ans := -1
	maxSize := 0
	for _, x := range initial {
		if vis[x] {
			continue
		}
		nodeId = -1
		size = 0
		dfs(x)
		if nodeId >= 0 && (size > maxSize || size == maxSize && nodeId < ans) {
			ans = nodeId
			maxSize = size
		}
	}
	if ans < 0 {
		return slices.Min(initial)
	}
	return ans
}

//leetcode submit region end(Prohibit modification and deletion)

/*
思路:

	遍历 initial 中的节点 x。
	如果 x 没有被访问过，那么从 x 开始 DFS，同时用一个 vis 数组标记访问过的节点。
	DFS 过程中，统计连通块的大小 size。
	DFS 过程中，记录访问到的在 initial 中的节点。
	DFS 结束后，如果发现该连通块只有一个在 initial 中的节点，并且该连通块的大小比最大的连通块更大，那么更新最大连通块的大小，以及答案节点 x。如果一样大，就更新答案节点的最小值。
	最后，如果没找到符合要求的节点，返回 min(initial)；否则返回答案节点。
*/
func main() {

}
